#version 300 es
precision mediump float;
precision highp int;

uniform highp vec4 casData[20];
uniform highp mat4 LWVPSpot0;
uniform highp sampler2DShadow shadowMapSpot[4];
uniform highp mat4 LWVPSpot1;
uniform highp mat4 LWVPSpot2;
uniform highp mat4 LWVPSpot3;
uniform highp samplerCubeShadow shadowMapPoint[4];
uniform highp vec2 lightProj;
uniform highp vec4 shirr[7];
uniform highp float envmapStrength;
uniform highp vec3 sunDir;
uniform bool receiveShadow;
uniform highp sampler2DShadow shadowMap;
uniform highp vec3 eye;
uniform highp float shadowsBias;
uniform highp vec3 sunCol;
uniform highp vec2 cameraProj;
uniform highp vec2 cameraPlane;
uniform highp sampler2D clustersData;
uniform highp vec4 lightsArray[32];
uniform highp vec4 lightsArraySpot[16];

in highp vec3 wnormal;
in highp vec3 eyeDir;
in highp vec3 wposition;
in highp vec4 wvpposition;
out highp vec4 fragColor[2];

highp vec3 surfaceAlbedo(highp vec3 baseColor, highp float metalness)
{
    return mix(baseColor, vec3(0.0), vec3(metalness));
}

highp vec3 surfaceF0(highp vec3 baseColor, highp float metalness)
{
    return mix(vec3(0.039999999105930328369140625), baseColor, vec3(metalness));
}

highp vec3 shIrradiance(highp vec3 nor, highp vec4 shirr_1[7])
{
    highp vec3 cl00 = vec3(shirr_1[0].x, shirr_1[0].y, shirr_1[0].z);
    highp vec3 cl1m1 = vec3(shirr_1[0].w, shirr_1[1].x, shirr_1[1].y);
    highp vec3 cl10 = vec3(shirr_1[1].z, shirr_1[1].w, shirr_1[2].x);
    highp vec3 cl11 = vec3(shirr_1[2].y, shirr_1[2].z, shirr_1[2].w);
    highp vec3 cl2m2 = vec3(shirr_1[3].x, shirr_1[3].y, shirr_1[3].z);
    highp vec3 cl2m1 = vec3(shirr_1[3].w, shirr_1[4].x, shirr_1[4].y);
    highp vec3 cl20 = vec3(shirr_1[4].z, shirr_1[4].w, shirr_1[5].x);
    highp vec3 cl21 = vec3(shirr_1[5].y, shirr_1[5].z, shirr_1[5].w);
    highp vec3 cl22 = vec3(shirr_1[6].x, shirr_1[6].y, shirr_1[6].z);
    return ((((((((((cl22 * 0.429042994976043701171875) * ((nor.y * nor.y) - ((-nor.z) * (-nor.z)))) + (((cl20 * 0.743125021457672119140625) * nor.x) * nor.x)) + (cl00 * 0.88622701168060302734375)) - (cl20 * 0.2477079927921295166015625)) + (((cl2m2 * 0.85808598995208740234375) * nor.y) * (-nor.z))) + (((cl21 * 0.85808598995208740234375) * nor.y) * nor.x)) + (((cl2m1 * 0.85808598995208740234375) * (-nor.z)) * nor.x)) + ((cl11 * 1.02332794666290283203125) * nor.y)) + ((cl1m1 * 1.02332794666290283203125) * (-nor.z))) + ((cl10 * 1.02332794666290283203125) * nor.x);
}

highp mat4 getCascadeMat(highp float d, inout int casi, inout int casIndex)
{
    highp vec4 comp = vec4(float(d > casData[16].x), float(d > casData[16].y), float(d > casData[16].z), float(d > casData[16].w));
    casi = int(min(dot(vec4(1.0), comp), 4.0));
    casIndex = casi * 4;
    return mat4(vec4(casData[casIndex]), vec4(casData[casIndex + 1]), vec4(casData[casIndex + 2]), vec4(casData[casIndex + 3]));
}

highp float PCF(highp sampler2DShadow shadowMap_1, highp vec2 uv, highp float compare, highp vec2 smSize)
{
    highp vec3 _237 = vec3(uv + (vec2(-1.0) / smSize), compare);
    highp float result = texture(shadowMap_1, vec3(_237.xy, _237.z));
    highp vec3 _246 = vec3(uv + (vec2(-1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_246.xy, _246.z));
    highp vec3 _257 = vec3(uv + (vec2(-1.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_257.xy, _257.z));
    highp vec3 _268 = vec3(uv + (vec2(0.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_268.xy, _268.z));
    highp vec3 _276 = vec3(uv, compare);
    result += texture(shadowMap_1, vec3(_276.xy, _276.z));
    highp vec3 _287 = vec3(uv + (vec2(0.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_287.xy, _287.z));
    highp vec3 _298 = vec3(uv + (vec2(1.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_298.xy, _298.z));
    highp vec3 _309 = vec3(uv + (vec2(1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_309.xy, _309.z));
    highp vec3 _320 = vec3(uv + (vec2(1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_320.xy, _320.z));
    return result / 9.0;
}

highp float shadowTestCascade(highp sampler2DShadow shadowMap_1, highp vec3 eye_1, highp vec3 p, highp float shadowsBias_1)
{
    highp float d = distance(eye_1, p);
    int param;
    int param_1;
    highp mat4 _600 = getCascadeMat(d, param, param_1);
    int casi = param;
    int casIndex = param_1;
    highp mat4 LWVP = _600;
    highp vec4 lPos = LWVP * vec4(p, 1.0);
    highp vec3 _615 = lPos.xyz / vec3(lPos.w);
    lPos = vec4(_615.x, _615.y, _615.z, lPos.w);
    highp float visibility = 1.0;
    if (lPos.w > 0.0)
    {
        visibility = PCF(shadowMap_1, lPos.xy, lPos.z - shadowsBias_1, vec2(4096.0, 1024.0));
    }
    highp float nextSplit = casData[16][casi];
    highp float _640;
    if (casi == 0)
    {
        _640 = nextSplit;
    }
    else
    {
        _640 = nextSplit - (casData[16][casi - 1]);
    }
    highp float splitSize = _640;
    highp float splitDist = (nextSplit - d) / splitSize;
    if ((splitDist <= 0.1500000059604644775390625) && (casi != 3))
    {
        int casIndex2 = casIndex + 4;
        highp mat4 LWVP2 = mat4(vec4(casData[casIndex2]), vec4(casData[casIndex2 + 1]), vec4(casData[casIndex2 + 2]), vec4(casData[casIndex2 + 3]));
        highp vec4 lPos2 = LWVP2 * vec4(p, 1.0);
        highp vec3 _718 = lPos2.xyz / vec3(lPos2.w);
        lPos2 = vec4(_718.x, _718.y, _718.z, lPos2.w);
        highp float visibility2 = 1.0;
        if (lPos2.w > 0.0)
        {
            visibility2 = PCF(shadowMap_1, lPos2.xy, lPos2.z - shadowsBias_1, vec2(4096.0, 1024.0));
        }
        highp float lerpAmt = smoothstep(0.0, 0.1500000059604644775390625, splitDist);
        return mix(visibility2, visibility, lerpAmt);
    }
    return visibility;
}

highp vec3 lambertDiffuseBRDF(highp vec3 albedo, highp float nl)
{
    return albedo * max(0.0, nl);
}

highp float d_ggx(highp float nh, highp float a)
{
    highp float a2 = a * a;
    highp float denom = pow(((nh * nh) * (a2 - 1.0)) + 1.0, 2.0);
    return (a2 * 0.3183098733425140380859375) / denom;
}

highp float v_smithschlick(highp float nl, highp float nv, highp float a)
{
    return 1.0 / (((nl * (1.0 - a)) + a) * ((nv * (1.0 - a)) + a));
}

highp vec3 f_schlick(highp vec3 f0, highp float vh)
{
    return f0 + ((vec3(1.0) - f0) * exp2((((-5.554729938507080078125) * vh) - 6.9831600189208984375) * vh));
}

highp vec3 specularBRDF(highp vec3 f0, highp float roughness, highp float nl, highp float nh, highp float nv, highp float vh)
{
    highp float a = roughness * roughness;
    return (f_schlick(f0, vh) * (d_ggx(nh, a) * clamp(v_smithschlick(nl, nv, a), 0.0, 1.0))) / vec3(4.0);
}

highp float linearize(highp float depth, highp vec2 cameraProj_1)
{
    return cameraProj_1.y / (depth - cameraProj_1.x);
}

int getClusterI(highp vec2 tc, highp float viewz, highp vec2 cameraPlane_1)
{
    int sliceZ = 0;
    highp float cnear = 3.0 + cameraPlane_1.x;
    if (viewz >= cnear)
    {
        highp float z = log((viewz - cnear) + 1.0) / log((cameraPlane_1.y - cnear) + 1.0);
        sliceZ = int(z * 15.0) + 1;
    }
    return (int(tc.x * 16.0) + int(float(int(tc.y * 16.0)) * 16.0)) + int((float(sliceZ) * 16.0) * 16.0);
}

highp float attenuate(highp float dist)
{
    return 1.0 / (dist * dist);
}

highp float shadowTest(highp sampler2DShadow shadowMap_1, highp vec3 lPos, highp float shadowsBias_1)
{
    bool _485 = lPos.x < 0.0;
    bool _491;
    if (!_485)
    {
        _491 = lPos.y < 0.0;
    }
    else
    {
        _491 = _485;
    }
    bool _497;
    if (!_491)
    {
        _497 = lPos.x > 1.0;
    }
    else
    {
        _497 = _491;
    }
    bool _503;
    if (!_497)
    {
        _503 = lPos.y > 1.0;
    }
    else
    {
        _503 = _497;
    }
    if (_503)
    {
        return 1.0;
    }
    return PCF(shadowMap_1, lPos.xy, lPos.z - shadowsBias_1, vec2(1024.0));
}

highp float lpToDepth(inout highp vec3 lp, highp vec2 lightProj_1)
{
    lp = abs(lp);
    highp float zcomp = max(lp.x, max(lp.y, lp.z));
    zcomp = lightProj_1.x - (lightProj_1.y / zcomp);
    return (zcomp * 0.5) + 0.5;
}

highp float PCFCube(highp samplerCubeShadow shadowMapCube, highp vec3 lp, inout highp vec3 ml, highp float bias, highp vec2 lightProj_1, highp vec3 n)
{
    highp vec3 param = lp;
    highp float _355 = lpToDepth(param, lightProj_1);
    highp float compare = _355 - (bias * 1.5);
    ml += ((n * bias) * 20.0);
    highp vec4 _371 = vec4(ml, compare);
    highp float result = texture(shadowMapCube, vec4(_371.xyz, _371.w));
    highp vec4 _383 = vec4(ml + vec3(0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_383.xyz, _383.w));
    highp vec4 _397 = vec4(ml + vec3(-0.001000000047497451305389404296875, 0.001000000047497451305389404296875, 0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_397.xyz, _397.w));
    highp vec4 _410 = vec4(ml + vec3(0.001000000047497451305389404296875, -0.001000000047497451305389404296875, 0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_410.xyz, _410.w));
    highp vec4 _423 = vec4(ml + vec3(0.001000000047497451305389404296875, 0.001000000047497451305389404296875, -0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_423.xyz, _423.w));
    highp vec4 _436 = vec4(ml + vec3(-0.001000000047497451305389404296875, -0.001000000047497451305389404296875, 0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_436.xyz, _436.w));
    highp vec4 _449 = vec4(ml + vec3(0.001000000047497451305389404296875, -0.001000000047497451305389404296875, -0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_449.xyz, _449.w));
    highp vec4 _462 = vec4(ml + vec3(-0.001000000047497451305389404296875, 0.001000000047497451305389404296875, -0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_462.xyz, _462.w));
    highp vec4 _475 = vec4(ml + vec3(-0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_475.xyz, _475.w));
    return result / 9.0;
}

highp vec3 sampleLight(highp vec3 p, highp vec3 n, highp vec3 v, highp float dotNV, highp vec3 lp, highp vec3 lightCol, highp vec3 albedo, highp float rough, highp float spec, highp vec3 f0, int index, highp float bias, bool receiveShadow_1, bool isSpot, highp float spotA, highp float spotB, highp vec3 spotDir)
{
    highp vec3 ld = lp - p;
    highp vec3 l = normalize(ld);
    highp vec3 h = normalize(v + l);
    highp float dotNH = dot(n, h);
    highp float dotVH = dot(v, h);
    highp float dotNL = dot(n, l);
    highp vec3 direct = lambertDiffuseBRDF(albedo, dotNL) + (specularBRDF(f0, rough, dotNL, dotNH, dotNV, dotVH) * spec);
    direct *= attenuate(distance(p, lp));
    direct *= lightCol;
    if (isSpot)
    {
        highp float spotEffect = dot(spotDir, l);
        if (spotEffect < spotA)
        {
            direct *= smoothstep(spotB, spotA, spotEffect);
        }
        if (receiveShadow_1)
        {
            if (index == 0)
            {
                highp vec4 lPos = LWVPSpot0 * vec4(p + ((n * bias) * 10.0), 1.0);
                direct *= shadowTest(shadowMapSpot[0], lPos.xyz / vec3(lPos.w), bias);
            }
            else
            {
                if (index == 1)
                {
                    highp vec4 lPos_1 = LWVPSpot1 * vec4(p + ((n * bias) * 10.0), 1.0);
                    direct *= shadowTest(shadowMapSpot[1], lPos_1.xyz / vec3(lPos_1.w), bias);
                }
                else
                {
                    if (index == 2)
                    {
                        highp vec4 lPos_2 = LWVPSpot2 * vec4(p + ((n * bias) * 10.0), 1.0);
                        direct *= shadowTest(shadowMapSpot[2], lPos_2.xyz / vec3(lPos_2.w), bias);
                    }
                    else
                    {
                        if (index == 3)
                        {
                            highp vec4 lPos_3 = LWVPSpot3 * vec4(p + ((n * bias) * 10.0), 1.0);
                            direct *= shadowTest(shadowMapSpot[3], lPos_3.xyz / vec3(lPos_3.w), bias);
                        }
                    }
                }
            }
        }
        return direct;
    }
    if (receiveShadow_1)
    {
        if (index == 0)
        {
            highp vec3 param = -l;
            highp float _936 = PCFCube(shadowMapPoint[0], ld, param, bias, lightProj, n);
            direct *= _936;
        }
        else
        {
            if (index == 1)
            {
                highp vec3 param_1 = -l;
                highp float _951 = PCFCube(shadowMapPoint[1], ld, param_1, bias, lightProj, n);
                direct *= _951;
            }
            else
            {
                if (index == 2)
                {
                    highp vec3 param_2 = -l;
                    highp float _966 = PCFCube(shadowMapPoint[2], ld, param_2, bias, lightProj, n);
                    direct *= _966;
                }
                else
                {
                    if (index == 3)
                    {
                        highp vec3 param_3 = -l;
                        highp float _981 = PCFCube(shadowMapPoint[3], ld, param_3, bias, lightProj, n);
                        direct *= _981;
                    }
                }
            }
        }
    }
    return direct;
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec3 vVec = normalize(eyeDir);
    highp float dotNV = max(dot(n, vVec), 0.0);
    highp vec3 basecol = vec3(0.800000011920928955078125);
    highp float roughness = 0.0;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 1.0;
    highp float opacity = 0.697031676769256591796875;
    if (opacity == 1.0)
    {
        discard;
    }
    highp vec3 albedo = surfaceAlbedo(basecol, metallic);
    highp vec3 f0 = surfaceF0(basecol, metallic);
    highp vec3 indirect = shIrradiance(n, shirr);
    indirect *= albedo;
    indirect *= occlusion;
    indirect *= envmapStrength;
    highp vec3 direct = vec3(0.0);
    highp float svisibility = 1.0;
    highp vec3 sh = normalize(vVec + sunDir);
    highp float sdotNL = dot(n, sunDir);
    highp float sdotNH = dot(n, sh);
    highp float sdotVH = dot(vVec, sh);
    if (receiveShadow)
    {
        svisibility = shadowTestCascade(shadowMap, eye, wposition + ((n * shadowsBias) * 10.0), shadowsBias);
    }
    direct += (((lambertDiffuseBRDF(albedo, sdotNL) + (specularBRDF(f0, roughness, sdotNL, sdotNH, dotNV, sdotVH) * specular)) * sunCol) * svisibility);
    highp vec2 param = cameraProj;
    highp float viewz = linearize(gl_FragCoord.z, param);
    highp vec2 param_1 = ((wvpposition.xy / vec2(wvpposition.w)) * 0.5) + vec2(0.5);
    highp float param_2 = viewz;
    highp vec2 param_3 = cameraPlane;
    int clusterI = getClusterI(param_1, param_2, param_3);
    int numLights = int(texelFetch(clustersData, ivec2(clusterI, 0), 0).x * 255.0);
    int numSpots = int(texelFetch(clustersData, ivec2(clusterI, 5), 0).x * 255.0);
    int numPoints = numLights - numSpots;
    for (int i = 0; i < min(numLights, 4); i++)
    {
        int li = int(texelFetch(clustersData, ivec2(clusterI, i + 1), 0).x * 255.0);
        int param_4 = li;
        highp float param_5 = lightsArray[li * 2].w;
        bool param_6 = receiveShadow;
        bool param_7 = li > (numPoints - 1);
        highp float param_8 = lightsArray[(li * 2) + 1].w;
        highp float param_9 = lightsArraySpot[li].w;
        highp vec3 param_10 = lightsArraySpot[li].xyz;
        direct += sampleLight(wposition, n, vVec, dotNV, (lightsArray[li * 2]).xyz, (lightsArray[(li * 2) + 1]).xyz, albedo, roughness, specular, f0, param_4, param_5, param_6, param_7, param_8, param_9, param_10);
    }
    highp vec4 premultipliedReflect = vec4(vec3(direct + (indirect * 0.5)) * opacity, opacity);
    highp float w = clamp((pow(min(1.0, premultipliedReflect.w * 10.0) + 0.00999999977648258209228515625, 3.0) * 100000000.0) * pow(1.0 - (gl_FragCoord.z * 0.89999997615814208984375), 3.0), 0.00999999977648258209228515625, 3000.0);
    fragColor[0] = vec4(premultipliedReflect.xyz * w, premultipliedReflect.w);
    fragColor[1] = vec4(premultipliedReflect.w * w, 0.0, 0.0, 1.0);
}

