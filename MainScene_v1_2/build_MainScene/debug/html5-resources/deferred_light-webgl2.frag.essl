#version 300 es
precision mediump float;
precision highp int;

uniform highp vec4 casData[20];
uniform highp mat4 LWVPSpot0;
uniform highp sampler2DShadow shadowMapSpot[4];
uniform highp mat4 LWVPSpot1;
uniform highp mat4 LWVPSpot2;
uniform highp mat4 LWVPSpot3;
uniform highp samplerCubeShadow shadowMapPoint[4];
uniform highp vec2 lightProj;
uniform highp sampler2D gbuffer0;
uniform highp sampler2D gbuffer1;
uniform highp sampler2D gbufferD;
uniform highp vec3 eye;
uniform highp vec3 eyeLook;
uniform highp vec2 cameraProj;
uniform highp vec4 shirr[7];
uniform highp float envmapStrength;
uniform highp sampler2D ssaotex;
uniform highp vec3 sunDir;
uniform highp sampler2DShadow shadowMap;
uniform highp float shadowsBias;
uniform highp vec3 sunCol;
uniform highp vec2 cameraPlane;
uniform highp sampler2D clustersData;
uniform highp vec4 lightsArray[32];
uniform highp vec4 lightsArraySpot[16];

in highp vec2 texCoord;
in highp vec3 viewRay;
out highp vec4 fragColor;

highp vec2 octahedronWrap(highp vec2 v)
{
    return (vec2(1.0) - abs(v.yx)) * vec2((v.x >= 0.0) ? 1.0 : (-1.0), (v.y >= 0.0) ? 1.0 : (-1.0));
}

void unpackFloatInt16(highp float val, out highp float f, inout uint i)
{
    i = uint(int((val / 0.06250095367431640625) + 1.525902189314365386962890625e-05));
    f = clamp((((-0.06250095367431640625) * float(i)) + val) / 0.06248569488525390625, 0.0, 1.0);
}

highp vec2 unpackFloat2(highp float f)
{
    return vec2(floor(f) / 255.0, fract(f));
}

highp vec3 surfaceAlbedo(highp vec3 baseColor, highp float metalness)
{
    return mix(baseColor, vec3(0.0), vec3(metalness));
}

highp vec3 surfaceF0(highp vec3 baseColor, highp float metalness)
{
    return mix(vec3(0.039999999105930328369140625), baseColor, vec3(metalness));
}

highp vec3 getPos(highp vec3 eye_1, highp vec3 eyeLook_1, highp vec3 viewRay_1, highp float depth, highp vec2 cameraProj_1)
{
    highp float linearDepth = cameraProj_1.y / (((depth * 0.5) + 0.5) - cameraProj_1.x);
    highp float viewZDist = dot(eyeLook_1, viewRay_1);
    highp vec3 wposition = eye_1 + (viewRay_1 * (linearDepth / viewZDist));
    return wposition;
}

highp vec3 shIrradiance(highp vec3 nor, highp vec4 shirr_1[7])
{
    highp vec3 cl00 = vec3(shirr_1[0].x, shirr_1[0].y, shirr_1[0].z);
    highp vec3 cl1m1 = vec3(shirr_1[0].w, shirr_1[1].x, shirr_1[1].y);
    highp vec3 cl10 = vec3(shirr_1[1].z, shirr_1[1].w, shirr_1[2].x);
    highp vec3 cl11 = vec3(shirr_1[2].y, shirr_1[2].z, shirr_1[2].w);
    highp vec3 cl2m2 = vec3(shirr_1[3].x, shirr_1[3].y, shirr_1[3].z);
    highp vec3 cl2m1 = vec3(shirr_1[3].w, shirr_1[4].x, shirr_1[4].y);
    highp vec3 cl20 = vec3(shirr_1[4].z, shirr_1[4].w, shirr_1[5].x);
    highp vec3 cl21 = vec3(shirr_1[5].y, shirr_1[5].z, shirr_1[5].w);
    highp vec3 cl22 = vec3(shirr_1[6].x, shirr_1[6].y, shirr_1[6].z);
    return ((((((((((cl22 * 0.429042994976043701171875) * ((nor.y * nor.y) - ((-nor.z) * (-nor.z)))) + (((cl20 * 0.743125021457672119140625) * nor.x) * nor.x)) + (cl00 * 0.88622701168060302734375)) - (cl20 * 0.2477079927921295166015625)) + (((cl2m2 * 0.85808598995208740234375) * nor.y) * (-nor.z))) + (((cl21 * 0.85808598995208740234375) * nor.y) * nor.x)) + (((cl2m1 * 0.85808598995208740234375) * (-nor.z)) * nor.x)) + ((cl11 * 1.02332794666290283203125) * nor.y)) + ((cl1m1 * 1.02332794666290283203125) * (-nor.z))) + ((cl10 * 1.02332794666290283203125) * nor.x);
}

highp vec3 lambertDiffuseBRDF(highp vec3 albedo, highp float nl)
{
    return albedo * max(0.0, nl);
}

highp float d_ggx(highp float nh, highp float a)
{
    highp float a2 = a * a;
    highp float denom = pow(((nh * nh) * (a2 - 1.0)) + 1.0, 2.0);
    return (a2 * 0.3183098733425140380859375) / denom;
}

highp float v_smithschlick(highp float nl, highp float nv, highp float a)
{
    return 1.0 / (((nl * (1.0 - a)) + a) * ((nv * (1.0 - a)) + a));
}

highp vec3 f_schlick(highp vec3 f0, highp float vh)
{
    return f0 + ((vec3(1.0) - f0) * exp2((((-5.554729938507080078125) * vh) - 6.9831600189208984375) * vh));
}

highp vec3 specularBRDF(highp vec3 f0, highp float roughness, highp float nl, highp float nh, highp float nv, highp float vh)
{
    highp float a = roughness * roughness;
    return (f_schlick(f0, vh) * (d_ggx(nh, a) * clamp(v_smithschlick(nl, nv, a), 0.0, 1.0))) / vec3(4.0);
}

highp mat4 getCascadeMat(highp float d, inout int casi, inout int casIndex)
{
    highp vec4 comp = vec4(float(d > casData[16].x), float(d > casData[16].y), float(d > casData[16].z), float(d > casData[16].w));
    casi = int(min(dot(vec4(1.0), comp), 4.0));
    casIndex = casi * 4;
    return mat4(vec4(casData[casIndex]), vec4(casData[casIndex + 1]), vec4(casData[casIndex + 2]), vec4(casData[casIndex + 3]));
}

highp float PCF(highp sampler2DShadow shadowMap_1, highp vec2 uv, highp float compare, highp vec2 smSize)
{
    highp vec3 _314 = vec3(uv + (vec2(-1.0) / smSize), compare);
    highp float result = texture(shadowMap_1, vec3(_314.xy, _314.z));
    highp vec3 _323 = vec3(uv + (vec2(-1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_323.xy, _323.z));
    highp vec3 _334 = vec3(uv + (vec2(-1.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_334.xy, _334.z));
    highp vec3 _345 = vec3(uv + (vec2(0.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_345.xy, _345.z));
    highp vec3 _353 = vec3(uv, compare);
    result += texture(shadowMap_1, vec3(_353.xy, _353.z));
    highp vec3 _364 = vec3(uv + (vec2(0.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_364.xy, _364.z));
    highp vec3 _375 = vec3(uv + (vec2(1.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_375.xy, _375.z));
    highp vec3 _386 = vec3(uv + (vec2(1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_386.xy, _386.z));
    highp vec3 _397 = vec3(uv + (vec2(1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_397.xy, _397.z));
    return result / 9.0;
}

highp float shadowTestCascade(highp sampler2DShadow shadowMap_1, highp vec3 eye_1, highp vec3 p, highp float shadowsBias_1)
{
    highp float d = distance(eye_1, p);
    int param;
    int param_1;
    highp mat4 _676 = getCascadeMat(d, param, param_1);
    int casi = param;
    int casIndex = param_1;
    highp mat4 LWVP = _676;
    highp vec4 lPos = LWVP * vec4(p, 1.0);
    highp vec3 _691 = lPos.xyz / vec3(lPos.w);
    lPos = vec4(_691.x, _691.y, _691.z, lPos.w);
    highp float visibility = 1.0;
    if (lPos.w > 0.0)
    {
        visibility = PCF(shadowMap_1, lPos.xy, lPos.z - shadowsBias_1, vec2(4096.0, 1024.0));
    }
    highp float nextSplit = casData[16][casi];
    highp float _716;
    if (casi == 0)
    {
        _716 = nextSplit;
    }
    else
    {
        _716 = nextSplit - casData[16][casi - 1];
    }
    highp float splitSize = _716;
    highp float splitDist = (nextSplit - d) / splitSize;
    if ((splitDist <= 0.1500000059604644775390625) && (casi != 3))
    {
        int casIndex2 = casIndex + 4;
        highp mat4 LWVP2 = mat4(vec4(casData[casIndex2]), vec4(casData[casIndex2 + 1]), vec4(casData[casIndex2 + 2]), vec4(casData[casIndex2 + 3]));
        highp vec4 lPos2 = LWVP2 * vec4(p, 1.0);
        highp vec3 _794 = lPos2.xyz / vec3(lPos2.w);
        lPos2 = vec4(_794.x, _794.y, _794.z, lPos2.w);
        highp float visibility2 = 1.0;
        if (lPos2.w > 0.0)
        {
            visibility2 = PCF(shadowMap_1, lPos2.xy, lPos2.z - shadowsBias_1, vec2(4096.0, 1024.0));
        }
        highp float lerpAmt = smoothstep(0.0, 0.1500000059604644775390625, splitDist);
        return mix(visibility2, visibility, lerpAmt);
    }
    return visibility;
}

highp float linearize(highp float depth, highp vec2 cameraProj_1)
{
    return cameraProj_1.y / (depth - cameraProj_1.x);
}

int getClusterI(highp vec2 tc, highp float viewz, highp vec2 cameraPlane_1)
{
    int sliceZ = 0;
    highp float cnear = 3.0 + cameraPlane_1.x;
    if (viewz >= cnear)
    {
        highp float z = log((viewz - cnear) + 1.0) / log((cameraPlane_1.y - cnear) + 1.0);
        sliceZ = int(z * 15.0) + 1;
    }
    return (int(tc.x * 16.0) + int(float(int(tc.y * 16.0)) * 16.0)) + int((float(sliceZ) * 16.0) * 16.0);
}

highp float attenuate(highp float dist)
{
    return 1.0 / (dist * dist);
}

highp float shadowTest(highp sampler2DShadow shadowMap_1, highp vec3 lPos, highp float shadowsBias_1)
{
    bool _561 = lPos.x < 0.0;
    bool _567;
    if (!_561)
    {
        _567 = lPos.y < 0.0;
    }
    else
    {
        _567 = _561;
    }
    bool _573;
    if (!_567)
    {
        _573 = lPos.x > 1.0;
    }
    else
    {
        _573 = _567;
    }
    bool _579;
    if (!_573)
    {
        _579 = lPos.y > 1.0;
    }
    else
    {
        _579 = _573;
    }
    if (_579)
    {
        return 1.0;
    }
    return PCF(shadowMap_1, lPos.xy, lPos.z - shadowsBias_1, vec2(1024.0));
}

highp float lpToDepth(inout highp vec3 lp, highp vec2 lightProj_1)
{
    lp = abs(lp);
    highp float zcomp = max(lp.x, max(lp.y, lp.z));
    zcomp = lightProj_1.x - (lightProj_1.y / zcomp);
    return (zcomp * 0.5) + 0.5;
}

highp float PCFCube(highp samplerCubeShadow shadowMapCube, highp vec3 lp, inout highp vec3 ml, highp float bias, highp vec2 lightProj_1, highp vec3 n)
{
    highp vec3 param = lp;
    highp float _431 = lpToDepth(param, lightProj_1);
    highp float compare = _431 - (bias * 1.5);
    ml += ((n * bias) * 20.0);
    highp vec4 _447 = vec4(ml, compare);
    highp float result = texture(shadowMapCube, vec4(_447.xyz, _447.w));
    highp vec4 _459 = vec4(ml + vec3(0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_459.xyz, _459.w));
    highp vec4 _473 = vec4(ml + vec3(-0.001000000047497451305389404296875, 0.001000000047497451305389404296875, 0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_473.xyz, _473.w));
    highp vec4 _486 = vec4(ml + vec3(0.001000000047497451305389404296875, -0.001000000047497451305389404296875, 0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_486.xyz, _486.w));
    highp vec4 _499 = vec4(ml + vec3(0.001000000047497451305389404296875, 0.001000000047497451305389404296875, -0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_499.xyz, _499.w));
    highp vec4 _512 = vec4(ml + vec3(-0.001000000047497451305389404296875, -0.001000000047497451305389404296875, 0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_512.xyz, _512.w));
    highp vec4 _525 = vec4(ml + vec3(0.001000000047497451305389404296875, -0.001000000047497451305389404296875, -0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_525.xyz, _525.w));
    highp vec4 _538 = vec4(ml + vec3(-0.001000000047497451305389404296875, 0.001000000047497451305389404296875, -0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_538.xyz, _538.w));
    highp vec4 _551 = vec4(ml + vec3(-0.001000000047497451305389404296875), compare);
    result += texture(shadowMapCube, vec4(_551.xyz, _551.w));
    return result / 9.0;
}

highp vec3 sampleLight(highp vec3 p, highp vec3 n, highp vec3 v, highp float dotNV, highp vec3 lp, highp vec3 lightCol, highp vec3 albedo, highp float rough, highp float spec, highp vec3 f0, int index, highp float bias, bool receiveShadow, bool isSpot, highp float spotA, highp float spotB, highp vec3 spotDir)
{
    highp vec3 ld = lp - p;
    highp vec3 l = normalize(ld);
    highp vec3 h = normalize(v + l);
    highp float dotNH = dot(n, h);
    highp float dotVH = dot(v, h);
    highp float dotNL = dot(n, l);
    highp vec3 direct = lambertDiffuseBRDF(albedo, dotNL) + (specularBRDF(f0, rough, dotNL, dotNH, dotNV, dotVH) * spec);
    direct *= attenuate(distance(p, lp));
    direct *= lightCol;
    if (isSpot)
    {
        highp float spotEffect = dot(spotDir, l);
        if (spotEffect < spotA)
        {
            direct *= smoothstep(spotB, spotA, spotEffect);
        }
        if (receiveShadow)
        {
            if (index == 0)
            {
                highp vec4 lPos = LWVPSpot0 * vec4(p + ((n * bias) * 10.0), 1.0);
                direct *= shadowTest(shadowMapSpot[0], lPos.xyz / vec3(lPos.w), bias);
            }
            else
            {
                if (index == 1)
                {
                    highp vec4 lPos_1 = LWVPSpot1 * vec4(p + ((n * bias) * 10.0), 1.0);
                    direct *= shadowTest(shadowMapSpot[1], lPos_1.xyz / vec3(lPos_1.w), bias);
                }
                else
                {
                    if (index == 2)
                    {
                        highp vec4 lPos_2 = LWVPSpot2 * vec4(p + ((n * bias) * 10.0), 1.0);
                        direct *= shadowTest(shadowMapSpot[2], lPos_2.xyz / vec3(lPos_2.w), bias);
                    }
                    else
                    {
                        if (index == 3)
                        {
                            highp vec4 lPos_3 = LWVPSpot3 * vec4(p + ((n * bias) * 10.0), 1.0);
                            direct *= shadowTest(shadowMapSpot[3], lPos_3.xyz / vec3(lPos_3.w), bias);
                        }
                    }
                }
            }
        }
        return direct;
    }
    if (receiveShadow)
    {
        if (index == 0)
        {
            highp vec3 param = -l;
            highp float _1012 = PCFCube(shadowMapPoint[0], ld, param, bias, lightProj, n);
            direct *= _1012;
        }
        else
        {
            if (index == 1)
            {
                highp vec3 param_1 = -l;
                highp float _1027 = PCFCube(shadowMapPoint[1], ld, param_1, bias, lightProj, n);
                direct *= _1027;
            }
            else
            {
                if (index == 2)
                {
                    highp vec3 param_2 = -l;
                    highp float _1042 = PCFCube(shadowMapPoint[2], ld, param_2, bias, lightProj, n);
                    direct *= _1042;
                }
                else
                {
                    if (index == 3)
                    {
                        highp vec3 param_3 = -l;
                        highp float _1057 = PCFCube(shadowMapPoint[3], ld, param_3, bias, lightProj, n);
                        direct *= _1057;
                    }
                }
            }
        }
    }
    return direct;
}

void main()
{
    highp vec4 g0 = textureLod(gbuffer0, texCoord, 0.0);
    highp vec3 n;
    n.z = (1.0 - abs(g0.x)) - abs(g0.y);
    highp vec2 _1255;
    if (n.z >= 0.0)
    {
        _1255 = g0.xy;
    }
    else
    {
        _1255 = octahedronWrap(g0.xy);
    }
    n = vec3(_1255.x, _1255.y, n.z);
    n = normalize(n);
    highp float roughness = g0.z;
    highp float param;
    uint param_1;
    unpackFloatInt16(g0.w, param, param_1);
    highp float metallic = param;
    uint matid = param_1;
    highp vec4 g1 = textureLod(gbuffer1, texCoord, 0.0);
    highp vec2 occspec = unpackFloat2(g1.w);
    highp vec3 albedo = surfaceAlbedo(g1.xyz, metallic);
    highp vec3 f0 = surfaceF0(g1.xyz, metallic);
    highp float depth = (textureLod(gbufferD, texCoord, 0.0).x * 2.0) - 1.0;
    highp vec3 p = getPos(eye, eyeLook, normalize(viewRay), depth, cameraProj);
    highp vec3 v = normalize(eye - p);
    highp float dotNV = max(dot(n, v), 0.0);
    highp vec3 envl = shIrradiance(n, shirr);
    envl *= albedo;
    envl *= (envmapStrength * occspec.x);
    fragColor = vec4(envl.x, envl.y, envl.z, fragColor.w);
    highp vec3 _1360 = fragColor.xyz * textureLod(ssaotex, texCoord, 0.0).x;
    fragColor = vec4(_1360.x, _1360.y, _1360.z, fragColor.w);
    if (matid == 1u)
    {
        highp vec3 _1371 = fragColor.xyz + g1.xyz;
        fragColor = vec4(_1371.x, _1371.y, _1371.z, fragColor.w);
        albedo = vec3(0.0);
    }
    highp vec3 sh = normalize(v + sunDir);
    highp float sdotNH = dot(n, sh);
    highp float sdotVH = dot(v, sh);
    highp float sdotNL = dot(n, sunDir);
    highp float svisibility = 1.0;
    highp vec3 sdirect = lambertDiffuseBRDF(albedo, sdotNL) + (specularBRDF(f0, roughness, sdotNL, sdotNH, dotNV, sdotVH) * occspec.y);
    svisibility = shadowTestCascade(shadowMap, eye, p + ((n * shadowsBias) * 10.0), shadowsBias);
    highp vec3 _1427 = fragColor.xyz + ((sdirect * svisibility) * sunCol);
    fragColor = vec4(_1427.x, _1427.y, _1427.z, fragColor.w);
    highp vec2 param_2 = cameraProj;
    highp float viewz = linearize((depth * 0.5) + 0.5, param_2);
    highp vec2 param_3 = texCoord;
    highp float param_4 = viewz;
    highp vec2 param_5 = cameraPlane;
    int clusterI = getClusterI(param_3, param_4, param_5);
    int numLights = int(texelFetch(clustersData, ivec2(clusterI, 0), 0).x * 255.0);
    int numSpots = int(texelFetch(clustersData, ivec2(clusterI, 5), 0).x * 255.0);
    int numPoints = numLights - numSpots;
    for (int i = 0; i < min(numLights, 4); i++)
    {
        int li = int(texelFetch(clustersData, ivec2(clusterI, i + 1), 0).x * 255.0);
        int param_6 = li;
        highp float param_7 = lightsArray[li * 2].w;
        bool param_8 = true;
        bool param_9 = li > (numPoints - 1);
        highp float param_10 = lightsArray[(li * 2) + 1].w;
        highp float param_11 = lightsArraySpot[li].w;
        highp vec3 param_12 = lightsArraySpot[li].xyz;
        highp vec3 _1551 = fragColor.xyz + sampleLight(p, n, v, dotNV, lightsArray[li * 2].xyz, lightsArray[(li * 2) + 1].xyz, albedo, roughness, occspec.y, f0, param_6, param_7, param_8, param_9, param_10, param_11, param_12);
        fragColor = vec4(_1551.x, _1551.y, _1551.z, fragColor.w);
    }
    fragColor.w = 1.0;
}

